%type block
%type chunk
%type chunk2
%type stat
%type laststat


%type forblock
%type whileblock

%type var
%type varlist

%type exp
%type explist
%type prefixexp

%type funcname
%type funcname2
%type namelist

%type function
%type funcbody
%type functioncall
%type parlist
%type args

%type tableconstructor

%type field
%type fieldlist
%type fieldlist2
%type optfieldsep
%type fieldsep

%type string

%type op
%type op_1
%type op_2
%type op_3
%type op_4
%type op_5
%type op_6
%type op_7
%type op_8
%type op_9

%token DO
%token WHILE
%token FOR
%token UNTIL
%token REPEAT
%token END
%token IN


%token LOCAL

%token FUNCTION
%token RETURN
%token BREAK

%token NIL
%token FALSE
%token TRUE
%token NUMBER
%token STRING
%token TDOT
%token NAME

%token <char> PLUS
%token <char> MINUS
%token <char> TIMES
%token <char> DIVIDE
%token <char> POWER
%token <char> MODULO

%token <char> EQUALS
%token <char> LESS_THAN
%token <char> MORE_THAN
%token <char> LESS_EQUAL_THAN
%token <char> MORE_EQUAL_THAN
%token <char> TILDE_EQUAL

%token <char> AND
%token <char> OR
%token <char> SQUARE
%token <char> NOT

%token <char> APPEND

%token ASSIGN
%token DOT
%token COLON
%token COMMA
%token SEMICOLON

%token BRACES_L
%token BRACES_R

%token BRACKET_L
%token BRACKET_R

%token PARANTHESES_L
%token PARANTHESES_R

%token QUIT 0 "end of file"

%%

block	: chunk
		;

chunk	: chunk2 laststat 
		| chunk2 
		| laststat 
		;

chunk2	: stat optsemi
	   	| chunk stat optsemi 
		;

optsemi	: SEMICOLON {}
		| /* empty */
		;

laststat: RETURN explist optsemi 
		| RETURN optsemi 
		| BREAK optsemi 
		;

stat	: varlist ASSIGN explist 
		| LOCAL FUNCTION NAME funcbody 
		| FUNCTION funcname funcbody 
		| functioncall 
		| DO block END 
        | whileblock 
		| REPEAT block UNTIL exp 
		| forblock 
	 	;

forblock: FOR NAME ASSIGN exp COMMA exp DO block END 
		| FOR NAME ASSIGN exp COMMA exp COMMA exp DO block END 
		| FOR namelist IN explist DO block END {
			// Unimplemented
			std::cout << "Namelist type for is not supported!" << std::endl;
			exit(-1);
		}
		;
		
whileblock: WHILE exp DO block END 
        ;


var		: NAME 
		| prefixexp BRACKET_L exp BRACKET_R 
		| prefixexp DOT NAME 
	 	;

varlist : var 
		| varlist COMMA var 
		;

funcname: funcname2 
		| funcname2 COLON NAME 
		;

funcname2: NAME 
		| funcname2 DOT NAME 
		;

namelist: NAME 
		| namelist COMMA NAME 
		;

exp		: NIL 
	 	| FALSE 
		| TRUE 
		| NUMBER 
		| string 
		/*| TDOT {
            // TODO: Implement
			//$$ = Node("exp", $1);
		}*/
		| function 
		| prefixexp 
		/*| tableconstructor {
            // TODO: Implement
            //$$ = $1;
			//$$ = Node("exp","tableconstructor");
			//$$.children.push_back($1);
		}*/
		| op 
		;

explist : exp 
		| explist COMMA exp 
		;

prefixexp: var 
		| functioncall 
		| PARANTHESES_L exp PARANTHESES_R 
		;

function: FUNCTION funcbody 
		;

functioncall: prefixexp args 
		| prefixexp COLON NAME args 
		;

funcbody: PARANTHESES_L parlist PARANTHESES_R block END 
		| PARANTHESES_L PARANTHESES_R block END 
		;

parlist	: namelist 
		| namelist COMMA TDOT 
		| TDOT 
		;

args	: PARANTHESES_L PARANTHESES_R 
		| PARANTHESES_L explist PARANTHESES_R 
        | tableconstructor 
		| string 
		;

tableconstructor: BRACES_L fieldlist BRACES_R 
		| BRACES_L BRACES_R 
		;

field	: BRACKET_L exp BRACKET_R ASSIGN exp 
		| NAME ASSIGN exp 
		| exp 
	  	;

fieldlist: fieldlist2 optfieldsep 
		;

fieldlist2: field 
		| fieldlist2 fieldsep field 
		;

optfieldsep: fieldsep 
		| /* empty */ {}
		;

fieldsep: COMMA 
		| SEMICOLON 
		;

string	: STRING 
		;


/*
    Operator Priority
*/

op      : op_1 
        ;

op_1    : op_1 OR op_2 
        | op_2 
        ;

op_2    : op_2 AND op_3 
        | op_3 
        ;

op_3    : op_3 LESS_THAN op_4 
        | op_3 LESS_EQUAL_THAN op_4 
        | op_3 MORE_THAN op_4 
        | op_3 MORE_EQUAL_THAN op_4 
        | op_3 TILDE_EQUAL op_4 
        | op_3 EQUALS op_4 
        | op_4 
        ;

op_4    : op_4 APPEND op_5 
        | op_5 
        ;

op_5    : op_5 PLUS op_6 
        | op_5 MINUS op_6 
        | op_6 
        ;

op_6    : op_6 TIMES op_7 
        | op_6 DIVIDE op_7 
        | op_6 MODULO op_7 
        | op_7 
        ;

op_7    : NOT op_8 {
			$$ = UnOp($1, $2);
        } 
        | SQUARE op_8 {
			$$ = UnOp($1, $2);
        } 
        | MINUS op_8 {
			$$ = UnOp($1, $2);
        } 
        | op_8 {
            $$ = $1;
        }
        ;

op_8    : op_8 POWER op_9 {
			$$ = BinOp($2, $1, $3);
        }
        | op_9 {
            $$ = $1;
        }
        ;

op_9    : exp {
            $$ = $1;
        }
        ;
